/*
 * ----------------------------------------------------------------------------
 * "THE BEER-WARE LICENSE" (Revision 42):
 * <quackmore-ff@yahoo.com> wrote this file.  As long as you retain this notice
 * you can do whatever you want with this stuff. If we meet some day, and you 
 * think this stuff is worth it, you can buy me a beer in return. Quackmore
 * ----------------------------------------------------------------------------
 */

/*
 *  APP_RELEASE is coming from git
 *  'git --no-pager describe --tags --always --dirty'
 *  and is generated by the Makefile
 */

#ifndef APP_RELEASE
#define APP_RELEASE "Unavailable"
#endif

char *library_release = APP_RELEASE;

extern "C"
{
#include "osapi.h"
#include "mem.h"
}

#include "library.hpp"

#ifdef ESPBOT

char ICACHE_FLASH_ATTR *f2str(char *str, float value, int decimals)
{
    int32 value_int = (int32)value;
    float value_dec = value - value_int;
    if (value_dec < 0)
        value_dec = -(value_dec);
    int idx;
    int pow = 1;
    for (idx = 0; idx < decimals; idx++)
        pow = pow * 10;
    os_sprintf(str, "%d.%d", (int32)value, (int32)(value_dec * pow));
    return str;
}

extern "C" void __cxa_pure_virtual(void)
{
    PRINT_ERROR("Uh oh, someone called a pure virtual function\n");
}

void *operator new(size_t size)
{
    return call_espbot_zalloc(size);
}

void *operator new[](size_t size)
{
    return call_espbot_zalloc(size);
}

void operator delete(void *p)
{
    call_espbot_free(p);
}

void operator delete[](void *p)
{
    call_espbot_free(p);
}

#else

char ICACHE_FLASH_ATTR *f2str(char *str, float value, int decimals)
{
    int32 value_int = (int32)value;
    float value_dec = value - value_int;
    if (value_dec < 0)
        value_dec = -(value_dec);
    int idx;
    int pow = 1;
    for (idx = 0; idx < decimals; idx++)
        pow = pow * 10;
    os_sprintf(str, "%d.%d", (int32)value, (int32)(value_dec * pow));
    return str;
}

extern "C" void __cxa_pure_virtual(void)
{
    PRINT_ERROR("Uh oh, someone called a pure virtual function\n");
}

void *operator new(size_t size)
{
    return call_espbot_zalloc(size);
}

void *operator new[](size_t size)
{
    return call_espbot_zalloc(size);
}

void operator delete(void *p)
{
    call_espbot_free(p);
}

void operator delete[](void *p)
{
    call_espbot_free(p);
}

#endif